<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\NuBL2.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\NuBL2.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Thu Feb 13 17:11:15 2025
<BR><P>
<H3>Maximum Stack Usage =       1512 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; VerifyNuBL3x &rArr; ECC_VerifySignature &rArr; ecc_init_curve &rArr; Hex2Reg &rArr; ch2hex
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[7b]">CLK_GetHXTFreq</a>
 <LI><a href="#[7c]">CLK_GetLXTFreq</a>
 <LI><a href="#[7d]">CLK_GetHCLKFreq</a>
 <LI><a href="#[7e]">CLK_GetPCLK0Freq</a>
 <LI><a href="#[7f]">CLK_GetPCLK1Freq</a>
 <LI><a href="#[80]">CLK_GetCPUFreq</a>
 <LI><a href="#[81]">CLK_GetPLLClockFreq</a>
 <LI><a href="#[82]">CLK_GetModuleClockSource</a>
 <LI><a href="#[83]">CLK_GetModuleClockDivider</a>
 <LI><a href="#[64]">SPD_Next</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[32]">ACMP01_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32]">ACMP01_IRQHandler</a><BR>
 <LI><a href="#[69]">ProcessHardFaultx</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[69]">ProcessHardFaultx</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[32]">ACMP01_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[6]">BOD_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[4b]">BPWM0_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[4c]">BPWM1_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[1e]">BRAKE0_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[22]">BRAKE1_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[3c]">CAN0_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[a]">CLKFAIL_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[44]">CRPT_IRQHandler</a> from verifynubl3x.o(.text.CRPT_IRQHandler) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[2f]">DAC_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[b]">DEFAULT_IRQHandler</a> from nubl2_startup.o(.text) referenced 28 times from nubl2_startup.o(RESET)
 <LI><a href="#[30]">EADC0_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[31]">EADC1_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[33]">EADC2_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[34]">EADC3_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[50]">ECAP0_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[51]">ECAP1_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[10]">EINT0_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[11]">EINT1_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[12]">EINT2_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[13]">EINT3_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[14]">EINT4_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[15]">EINT5_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[46]">EINT6_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[53]">EINT7_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[1f]">EPWM0_P0_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[20]">EPWM0_P1_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[21]">EPWM0_P2_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[23]">EPWM1_P0_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[24]">EPWM1_P1_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[25]">EPWM1_P2_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[5a]">EWDT_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[5b]">EWWDT_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[16]">GPA_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[17]">GPB_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[18]">GPC_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[19]">GPD_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[1a]">GPE_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[1b]">GPF_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[45]">GPG_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[52]">GPH_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[2c]">I2C0_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[2d]">I2C1_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[4d]">I2C2_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[42]">I2S0_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[7]">IRC_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[58]">KS_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[56]">LCD_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[5c]">NS_ISP_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[43]">OPA0_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[2e]">PDMA0_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[54]">PDMA1_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[8]">PWRWU_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[62]">ProcessHardFault</a> from retarget.o(.text.ProcessHardFault) referenced from nubl2_startup.o(.text)
 <LI><a href="#[4e]">QEI0_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[4f]">QEI1_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[1c]">QSPI0_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[c]">RTC_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[d]">RTC_TAMPER_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[3d]">SC0_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[3e]">SC1_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[3f]">SC2_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[55]">SCU_IRQHandler</a> from system_m2354.o(.text.SCU_IRQHandler) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[41]">SDH0_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[63]">SH_Return</a> from retarget.o(.text.SH_Return) referenced from nubl2_startup.o(.text)
 <LI><a href="#[64]">SPD_Next</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(.text)
 <LI><a href="#[1d]">SPI0_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[37]">SPI1_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[38]">SPI2_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[40]">SPI3_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[9]">SRAM_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[60]">SystemInit</a> from system_m2354.o(.text.SystemInit) referenced from nubl2_startup.o(.text)
 <LI><a href="#[59]">TAMPER_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[26]">TMR0_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[27]">TMR1_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[28]">TMR2_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[29]">TMR3_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[5d]">TMR4_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[5e]">TMR5_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[57]">TRNG_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[2a]">UART0_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[2b]">UART1_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[35]">UART2_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[36]">UART3_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[47]">UART4_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[48]">UART5_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[39]">USBD_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[3a]">USBH_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[3b]">USBOTG_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[49]">USCI0_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[4a]">USCI1_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[e]">WDT_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[f]">WWDT_IRQHandler</a> from nubl2_startup.o(.text) referenced from nubl2_startup.o(RESET)
 <LI><a href="#[61]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from nubl2_startup.o(.text)
 <LI><a href="#[65]">fputc</a> from retarget.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[5f]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[61]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(.text)
</UL>
<P><STRONG><a name="[da]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[84]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[97]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[db]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[dc]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[dd]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[de]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[df]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>ProcessHardFaultx</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nubl2_startup.o(.text), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHardFaultx
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHardFaultx
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>ACMP01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP01_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP01_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>BPWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>BPWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>BRAKE0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>BRAKE1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[a]"></a>CLKFAIL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DEFAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>ECAP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>ECAP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EINT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EINT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>EINT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>EINT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EPWM0_P0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EPWM0_P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EPWM0_P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EPWM1_P0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EPWM1_P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EPWM1_P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>EWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>EWWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>GPA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>GPB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>GPC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>GPD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>GPE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>GPF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>GPG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>GPH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2S0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>IRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>KS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>NS_ISP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>OPA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>PDMA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>PDMA1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>QEI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>QEI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>QSPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>SC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[41]"></a>SDH0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>SDH1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[1d]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SRAM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TMR4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>TMR5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USBH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USBOTG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>USCI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>USCI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>SH_DoCommand</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nubl2_startup.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[67]"></a>__PC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nubl2_startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[68]"></a>SPD_Return</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nubl2_startup.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[bb]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyNuBL3x
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuBL32_CDI
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA512
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_IRQHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHardFault
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_IRQHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHardFault
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_curve
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[cf]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac
</UL>

<P><STRONG><a name="[e3]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[b7]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Reg
</UL>

<P><STRONG><a name="[ca]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyNuBL3x
</UL>

<P><STRONG><a name="[89]"></a>strcasecmp</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, strcasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_VerifySignature
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8a]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>

<P><STRONG><a name="[e4]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[85]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[e5]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>__aeabi_uidiv$div0</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uidiv_div0.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>__aeabi_uidivmod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uidiv_div0.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[e7]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[e8]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[e9]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[90]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[99]"></a>CDI_Cal</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, cdi.o(.text.CDI_Cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CDI_Cal &rArr; hmac
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuBL32_CDI
</UL>

<P><STRONG><a name="[a9]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, clk.o(.text.CLK_EnableModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyNuBL3x
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuBL32_CDI
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckROTPKStatus
</UL>

<P><STRONG><a name="[9b]"></a>CLK_EnablePLL</STRONG> (Thumb, 432 bytes, Stack size 64 bytes, clk.o(.text.CLK_EnablePLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CLK_EnablePLL &rArr; CLK_WaitClockReady
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[c2]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, clk.o(.text.CLK_EnableXtalRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLK_EnableXtalRC
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[72]"></a>__acle_se_CLK_GetCPUFreq</STRONG> (Thumb, 0 bytes, Stack size 88 bytes, clk.o(.text.CLK_GetCPUFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __acle_se_CLK_GetCPUFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetCPUFreq
</UL>

<P><STRONG><a name="[7a]"></a>__acle_se_CLK_GetHCLKFreq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, clk.o(.text.CLK_GetHCLKFreq), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = __acle_se_CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq &rArr; __acle_se_CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
</UL>

<P><STRONG><a name="[78]"></a>__acle_se_CLK_GetHXTFreq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, clk.o(.text.CLK_GetHXTFreq), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __acle_se_CLK_GetHXTFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHXTFreq
</UL>

<P><STRONG><a name="[79]"></a>__acle_se_CLK_GetLXTFreq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, clk.o(.text.CLK_GetLXTFreq), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __acle_se_CLK_GetLXTFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetLXTFreq
</UL>

<P><STRONG><a name="[75]"></a>__acle_se_CLK_GetModuleClockDivider</STRONG> (Thumb, 0 bytes, Stack size 28 bytes, clk.o(.text.CLK_GetModuleClockDivider))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __acle_se_CLK_GetModuleClockDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetModuleClockDivider
</UL>

<P><STRONG><a name="[74]"></a>__acle_se_CLK_GetModuleClockSource</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, clk.o(.text.CLK_GetModuleClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __acle_se_CLK_GetModuleClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetModuleClockSource
</UL>

<P><STRONG><a name="[70]"></a>__acle_se_CLK_GetPCLK0Freq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, clk.o(.text.CLK_GetPCLK0Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = __acle_se_CLK_GetPCLK0Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq &rArr; __acle_se_CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
</UL>

<P><STRONG><a name="[71]"></a>__acle_se_CLK_GetPCLK1Freq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, clk.o(.text.CLK_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = __acle_se_CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq &rArr; __acle_se_CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
</UL>

<P><STRONG><a name="[73]"></a>__acle_se_CLK_GetPLLClockFreq</STRONG> (Thumb, 0 bytes, Stack size 28 bytes, clk.o(.text.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __acle_se_CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>

<P><STRONG><a name="[9e]"></a>CLK_SetCoreClock</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, clk.o(.text.CLK_SetCoreClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = CLK_SetCoreClock &rArr; CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq &rArr; __acle_se_CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[9f]"></a>CLK_SetHCLK</STRONG> (Thumb, 468 bytes, Stack size 24 bytes, clk.o(.text.CLK_SetHCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq &rArr; __acle_se_CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[c3]"></a>CLK_SetModuleClock</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, clk.o(.text.CLK_SetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[9c]"></a>CLK_WaitClockReady</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, clk.o(.text.CLK_WaitClockReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[44]"></a>CRPT_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, verifynubl3x.o(.text.CRPT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CRPT_IRQHandler &rArr; ECC_DriverISR
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_DriverISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>CRPT_Reg2Hex</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, crypto.o(.text.CRPT_Reg2Hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CRPT_Reg2Hex &rArr; Reg2Hex &rArr; get_Nth_nibble_char
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg2Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyNuBL3x
</UL>

<P><STRONG><a name="[6d]"></a>Cal_SHA512_Flash</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, verifynubl3x.o(.text.Cal_SHA512_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Cal_SHA512_Flash &rArr; SYS_ResetModule
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyNuBL3x
</UL>

<P><STRONG><a name="[6e]"></a>Cal_SHA512_SRAM</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, verifynubl3x.o(.text.Cal_SHA512_SRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Cal_SHA512_SRAM &rArr; SHA_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA_Read
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA_Start
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA_SetDMATransfer
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA_Open
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyNuBL3x
</UL>

<P><STRONG><a name="[a0]"></a>ECC_DriverISR</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, crypto.o(.text.ECC_DriverISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ECC_DriverISR
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRPT_IRQHandler
</UL>

<P><STRONG><a name="[ae]"></a>ECC_VerifySignature</STRONG> (Thumb, 1176 bytes, Stack size 376 bytes, crypto.o(.text.ECC_VerifySignature))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ECC_VerifySignature &rArr; ecc_init_curve &rArr; Hex2Reg &rArr; ch2hex
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ecc_codec
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_reg
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init_curve
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Reg
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg2Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyNuBL3x
</UL>

<P><STRONG><a name="[b3]"></a>FMC_NSBA_Setup</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, system_m2354.o(.text.FMC_NSBA_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_NSBA_Setup &rArr; SYS_UnlockReg
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b5]"></a>FMC_Open</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fmc.o(.text.FMC_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FMC_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuBL32_CDI
</UL>

<P><STRONG><a name="[b6]"></a>FMC_Read</STRONG> (Thumb, 208 bytes, Stack size 72 bytes, fmc.o(.text.FMC_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FMC_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuBL32_CDI
</UL>

<P><STRONG><a name="[ce]"></a>GetChar</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, retarget.o(.text.GetChar))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[aa]"></a>KS_Open</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, keystore.o(.text.KS_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KS_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckROTPKStatus
</UL>

<P><STRONG><a name="[ba]"></a>KS_Read</STRONG> (Thumb, 252 bytes, Stack size 44 bytes, keystore.o(.text.KS_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = KS_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuBL32_CDI
</UL>

<P><STRONG><a name="[ad]"></a>KS_WriteOTP</STRONG> (Thumb, 300 bytes, Stack size 68 bytes, keystore.o(.text.KS_WriteOTP))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = KS_WriteOTP
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckROTPKStatus
</UL>

<P><STRONG><a name="[c7]"></a>NSC_Init</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, system_m2354.o(.text.NSC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NSC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TZ_SAU_Setup
</UL>

<P><STRONG><a name="[b9]"></a>NuBL32_CDI</STRONG> (Thumb, 428 bytes, Stack size 480 bytes, main.o(.text.NuBL32_CDI))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = NuBL32_CDI &rArr; CDI_Cal &rArr; hmac
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDI_Cal
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KS_Read
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA512
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>ProcessHardFault</STRONG> (Thumb, 816 bytes, Stack size 320 bytes, retarget.o(.text.ProcessHardFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ProcessHardFault &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(.text)
</UL>
<P><STRONG><a name="[55]"></a>SCU_IRQHandler</STRONG> (Thumb, 224 bytes, Stack size 184 bytes, system_m2354.o(.text.SCU_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SCU_IRQHandler &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>SCU_Setup</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, system_m2354.o(.text.SCU_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SCU_Setup &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a4]"></a>SHA_Open</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, crypto.o(.text.SHA_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SHA_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_SHA512_SRAM
</UL>

<P><STRONG><a name="[a7]"></a>SHA_Read</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, crypto.o(.text.SHA_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SHA_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_SHA512_SRAM
</UL>

<P><STRONG><a name="[a5]"></a>SHA_SetDMATransfer</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, crypto.o(.text.SHA_SetDMATransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SHA_SetDMATransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_SHA512_SRAM
</UL>

<P><STRONG><a name="[a6]"></a>SHA_Start</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, crypto.o(.text.SHA_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SHA_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_SHA512_SRAM
</UL>

<P><STRONG><a name="[63]"></a>SH_Return</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, retarget.o(.text.SH_Return))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SH_Return
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>SYS_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, main.o(.text.SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = SYS_Init &rArr; CLK_SetCoreClock &rArr; CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq &rArr; __acle_se_CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>SYS_ResetModule</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, sys.o(.text.SYS_ResetModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SYS_ResetModule
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_SHA512_SRAM
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_SHA512_Flash
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[c4]"></a>SendChar</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, retarget.o(.text.SendChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SendChar &rArr; SendChar_ToUART
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar_ToUART
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[c5]"></a>SendChar_ToUART</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, retarget.o(.text.SendChar_ToUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SendChar_ToUART
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[9d]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, system_m2354.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = SystemCoreClockUpdate &rArr; CLK_GetCPUFreq &rArr; __acle_se_CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetCPUFreq
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_CLK_GetPCLK1Freq
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_CLK_GetPCLK0Freq
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_CLK_GetHCLKFreq
</UL>

<P><STRONG><a name="[60]"></a>SystemInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, system_m2354.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; TZ_SAU_Setup &rArr; NSC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TZ_SAU_Setup
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Setup
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NSBA_Setup
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(.text)
</UL>
<P><STRONG><a name="[c6]"></a>TZ_SAU_Setup</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, system_m2354.o(.text.TZ_SAU_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TZ_SAU_Setup &rArr; NSC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NSC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c8]"></a>UART_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(.text.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = UART_Init &rArr; UART_Open &rArr; CLK_GetPCLK1Freq &rArr; __acle_se_CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq &rArr; __acle_se_CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>UART_Open</STRONG> (Thumb, 520 bytes, Stack size 96 bytes, uart.o(.text.UART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = UART_Open &rArr; CLK_GetPCLK1Freq &rArr; __acle_se_CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq &rArr; __acle_se_CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetModuleClockDivider
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetModuleClockSource
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[6f]"></a>VerifyNuBL3x</STRONG> (Thumb, 400 bytes, Stack size 880 bytes, verifynubl3x.o(.text.VerifyNuBL3x))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = VerifyNuBL3x &rArr; ECC_VerifySignature &rArr; ecc_init_curve &rArr; Hex2Reg &rArr; ch2hex
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_VerifySignature
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRPT_Reg2Hex
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_SHA512_SRAM
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_SHA512_Flash
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BytesSwap
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>fgetc</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, retarget.o(.text.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChar
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>

<P><STRONG><a name="[65]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, retarget.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = fputc &rArr; SendChar &rArr; SendChar_ToUART
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[5f]"></a>main</STRONG> (Thumb, 332 bytes, Stack size 152 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512 + Unknown Stack Size
<LI>Call Chain = main &rArr; VerifyNuBL3x &rArr; ECC_VerifySignature &rArr; ecc_init_curve &rArr; Hex2Reg &rArr; ch2hex
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyNuBL3x
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KS_Open
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KS_Read
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuBL32_CDI
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SetVectorPageAddr
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckROTPKStatus
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PC
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[d3]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ea]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[eb]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[ec]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[ab]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuBL32_CDI
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckROTPKStatus
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_IRQHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHardFault
</UL>

<P><STRONG><a name="[98]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[ed]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[ee]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[ef]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[ac]"></a>getc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, getc.o(i.getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getc &rArr; fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckROTPKStatus
</UL>

<P><STRONG><a name="[7b]"></a>CLK_GetHXTFreq</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = CLK_GetHXTFreq &rArr; __acle_se_CLK_GetHXTFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_CLK_GetHXTFreq
</UL>

<P><STRONG><a name="[7c]"></a>CLK_GetLXTFreq</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = CLK_GetLXTFreq &rArr; __acle_se_CLK_GetLXTFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_CLK_GetLXTFreq
</UL>

<P><STRONG><a name="[7d]"></a>CLK_GetHCLKFreq</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = CLK_GetHCLKFreq &rArr; __acle_se_CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq &rArr; __acle_se_CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_CLK_GetHCLKFreq
</UL>

<P><STRONG><a name="[7e]"></a>CLK_GetPCLK0Freq</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = CLK_GetPCLK0Freq &rArr; __acle_se_CLK_GetPCLK0Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq &rArr; __acle_se_CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_CLK_GetPCLK0Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>

<P><STRONG><a name="[7f]"></a>CLK_GetPCLK1Freq</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = CLK_GetPCLK1Freq &rArr; __acle_se_CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetCPUFreq &rArr; __acle_se_CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_CLK_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>

<P><STRONG><a name="[80]"></a>CLK_GetCPUFreq</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = CLK_GetCPUFreq &rArr; __acle_se_CLK_GetCPUFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_CLK_GetCPUFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[81]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __acle_se_CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[82]"></a>CLK_GetModuleClockSource</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = CLK_GetModuleClockSource &rArr; __acle_se_CLK_GetModuleClockSource
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_CLK_GetModuleClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>

<P><STRONG><a name="[83]"></a>CLK_GetModuleClockDivider</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, anon$$obj.o(Veneer$$CMSE))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = CLK_GetModuleClockDivider &rArr; __acle_se_CLK_GetModuleClockDivider
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__acle_se_CLK_GetModuleClockDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[64]"></a>SPD_Next</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, nubl2_startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nubl2_startup.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>SYS_UnlockReg</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, system_m2354.o(.text.SYS_UnlockReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_NSBA_Setup
</UL>

<P><STRONG><a name="[c0]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, system_m2354.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Setup
</UL>

<P><STRONG><a name="[bc]"></a>SHA512</STRONG> (Thumb, 144 bytes, Stack size 96 bytes, main.o(.text.SHA512))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SHA512
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuBL32_CDI
</UL>

<P><STRONG><a name="[d0]"></a>SYS_UnlockReg</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, main.o(.text.SYS_UnlockReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>CheckROTPKStatus</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, main.o(.text.CheckROTPKStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CheckROTPKStatus &rArr; KS_WriteOTP
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KS_WriteOTP
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KS_Open
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>FMC_SetVectorPageAddr</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, main.o(.text.FMC_SetVectorPageAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_SetVectorPageAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d2]"></a>__NVIC_SystemReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, verifynubl3x.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyNuBL3x
</UL>

<P><STRONG><a name="[77]"></a>BytesSwap</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, verifynubl3x.o(.text.BytesSwap))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BytesSwap
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyNuBL3x
</UL>

<P><STRONG><a name="[9a]"></a>hmac</STRONG> (Thumb, 232 bytes, Stack size 176 bytes, cdi.o(.text.hmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = hmac
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDI_Cal
</UL>

<P><STRONG><a name="[a2]"></a>Reg2Hex</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, crypto.o(.text.Reg2Hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Reg2Hex &rArr; get_Nth_nibble_char
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Nth_nibble_char
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_VerifySignature
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRPT_Reg2Hex
</UL>

<P><STRONG><a name="[be]"></a>get_Nth_nibble_char</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, crypto.o(.text.get_Nth_nibble_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_Nth_nibble_char
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg2Hex
</UL>

<P><STRONG><a name="[b1]"></a>Hex2Reg</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, crypto.o(.text.Hex2Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Hex2Reg &rArr; ch2hex
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch2hex
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_VerifySignature
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ecc_codec
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init_curve
</UL>

<P><STRONG><a name="[b8]"></a>ch2hex</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, crypto.o(.text.ch2hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ch2hex
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Reg
</UL>

<P><STRONG><a name="[cb]"></a>get_curve</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, crypto.o(.text.get_curve))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_curve
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init_curve
</UL>

<P><STRONG><a name="[af]"></a>ecc_init_curve</STRONG> (Thumb, 536 bytes, Stack size 48 bytes, crypto.o(.text.ecc_init_curve))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ecc_init_curve &rArr; Hex2Reg &rArr; ch2hex
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_ecc_reg
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_curve
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_VerifySignature
</UL>

<P><STRONG><a name="[b0]"></a>clean_reg</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, crypto.o(.text.clean_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clean_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_VerifySignature
</UL>

<P><STRONG><a name="[cc]"></a>dump_ecc_reg</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, crypto.o(.text.dump_ecc_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dump_ecc_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init_curve
</UL>

<P><STRONG><a name="[b2]"></a>run_ecc_codec</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, crypto.o(.text.run_ecc_codec))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = run_ecc_codec &rArr; Hex2Reg &rArr; ch2hex
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC_VerifySignature
</UL>

<P><STRONG><a name="[d5]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d4]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[d8]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d7]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
